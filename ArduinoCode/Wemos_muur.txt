#include <Wire.h>
#include <ESP8266WiFi.h>
#include <String.h>
#include <FastLED.h>

#define I2C_SDL D1
#define I2C_SDA D2
#define sizeOfChar 48
#define LED_PIN D5
#define NUM_LEDS 3


const char *ssid = "hotspot laptop dcg";
const char *password = "dcg2002H";
const char* serverIp = "192.168.137.32"; // Vervang dit met het IP-adres van jouw server
const int serverPort = 8080;

void setOutputs();
void readOutputs();
void regelRGB(int x, int y, int z);
void regelBrightness(int brightness);
void regelVenster();
void regelLedStrip();
void sendKeyValue();
unsigned int readCompareValue();
void ontvangAntwoord();

/////////
void receiveMessage();
/////////
 
  CRGB leds[3];
  WiFiClient client;  // client aanmaken
  unsigned int outputs=0;
  char KeyValueMuur[] ={"String blablabla"};

  unsigned int ID =5;
  unsigned int anin0, anin1;
  unsigned int brightness, rood, groen, blauw =0;
  int venstercommand;
  int helderheidsniveau;
  int RGBWaarde;
  
  int data2;
  unsigned int VensterWaarde;

 //  char buffer[1024];
  char antwoordbuffer[1024];
  char msg[1024];


  void setup(void){
  Wire.begin();
  Serial.begin(115200);
  wifiVerbinden();
 // setOutputs();
  FastLED.addLeds<WS2812, LED_PIN, GRB>(leds, NUM_LEDS);
  FastLED.setBrightness(1000);
  
 
  
}
   

void loop(void){
  WiFiClient client = PiConnect();
  if(client.connected()){
  //  client.print("MUUR");
  }
  MuurSetup();
    int LDRWaarde = LeesLDR();
    int DimmerWaarde = LeesDimmer();
    setOutputs();
    readOutputs();
    sendKeyValue();
    client.flush();
  
    ontvangAntwoord();
    
    regelVenster();
    regelLedStrip();
    delay(500);
    client.stop();
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void ontvangAntwoord(){

  String response = client.readStringUntil('}');
  Serial.println("Ontvangen data antwoord:");
  Serial.println(response);

  size_t antwoord = response.length();
  response.toCharArray(antwoordbuffer, antwoord + 1);
/*
  size_t antwoord = client.readBytes(antwoordbuffer, sizeof(antwoordbuffer) -1);
    antwoordbuffer[antwoord] = '\0';
*/
    sscanf(antwoordbuffer, "%*s %d %*s %d %*s %d %*s %d", &ID, &venstercommand, &helderheidsniveau, &RGBWaarde);
    Serial.println("Ontvangen data antwoord:");
Serial.println(antwoordbuffer);
    //Serial.println("ID:");
    //Serial.println(ID);
   // Serial.println("Venstercommand:");
   // Serial.println(venstercommand);
  //  Serial.println("Helderheidsniveau:");
   // Serial.println(helderheidsniveau);
   // Serial.println("RGBWaarde:");
  //  Serial.println(RGBWaarde);
}


void receiveMessage(){
   int i = 0;
   while (!client.available()){}
   while(client.available()){
    msg[i] = client.read();
    i++;
   }
   char* ptr = msg;
   int value[5];
   Serial.println(msg);
}
void MuurSetup(void){
   //Config PCA9554
  //Inside loop for debugging purpose (hot plugging wemos module into i/o board).
  //IO0-IO3 as input, IO4-IO7 as output.
  Wire.beginTransmission(0x38);
  Wire.write(byte(0x03));
  Wire.write(byte(0x0F));
  Wire.endTransmission();

  //Config MAX11647
  //Inside loop for debugging purpose (hot plugging wemos module into i/o board).
  Wire.beginTransmission(0x36);
  Wire.write(byte(0xA2));
  Wire.write(byte(0x03));
  Wire.endTransmission();
}

/////////////////////
void setOutputs(){
  //Set PCA9554 outputs (IO44-IO7)
  Wire.beginTransmission(0x38); 
  Wire.write(byte(0x01));            
  Wire.write(byte(outputs<<4));            
  Wire.endTransmission();
 // Serial.print("Digital out: ");
 // Serial.println(outputs&0x0F);  
 // outputs++;
}
/////////////////////////////
unsigned int readCompareValue(){
  //Read PCA9554 outputs (IO40-IO3)
  Wire.beginTransmission(0x38); 
  Wire.write(byte(0x00));      
  Wire.endTransmission();
  Wire.requestFrom(0x38, 1);   
  return (Wire.read()&0x0F);  
}
////////////////////////
void readOutputs(){
  //Read PCA9554 outputs (IO40-IO3)
  Wire.beginTransmission(0x38); 
  Wire.write(byte(0x00));      
  Wire.endTransmission();
  Wire.requestFrom(0x38, 1);   
  unsigned int inputs = Wire.read(); 
 // Serial.print("Digital in: ");
 // Serial.println(inputs&0x0F);
}
///////////////
int LeesLDR(){
  //Read analog 10bit inputs 0&1
  Wire.requestFrom(0x36, 4);
  anin0 = Wire.read() & 0x03;
  anin0 = anin0 << 8;           // vinger voor de sensor geeft tussen de 0 en 300 
  anin0 = anin0 | Wire.read();  // lokaal licht geeft rond de 650 
  return anin0;             // 975 is de hoogste waarde die de ldr meet met zaklamp
}
//////////////////////////
int LeesDimmer(){

  Wire.requestFrom(0x36, 4);
  Wire.read();
  Wire.read();
  anin1 = Wire.read() & 0x03;
  anin1 = anin1 << 8;
  anin1 = anin1 | Wire.read();
    return anin1;
}
///////////
void regelLedStrip(){

    if(RGBWaarde == 0){
      regelRGB(0,0,0);
      rood = 0;
      groen = 0;
      blauw =0;
    }
    else if(RGBWaarde == 1){
      regelRGB(255,0,0);
      rood = 255;
      groen = 0;
      blauw = 0;
    }
    else if(RGBWaarde == 2){
      regelRGB(0,255,0);
      rood = 0;
      groen = 255;
      blauw = 0;
    }
    else if(RGBWaarde == 3){
      regelRGB(0,0,255);
      rood = 0;
      groen = 0;
      blauw = 255;
    }
    else if(RGBWaarde == 4){
      regelRGB(255,255,255);
      rood = 255;
      groen = 255;
      blauw = 255;
    }

    regelBrightness(helderheidsniveau);
    brightness = helderheidsniveau;
}

//////////
void sendKeyValue(){
  if (client.availableForWrite()) {
      char buffer[1024];
      memset(buffer, 0, strlen(buffer));
      sprintf(buffer,"ID: %d Venster: %d LDR: %d POT: %d Brightness: %d RGB %d %d %d \n",ID,outputs,anin0,anin1,brightness,rood,groen,blauw);
    //sprintf(buffer,"ID: %s Venster: %d LDR: %d",ID, outputs,anin0);
      printf("Dit is de keyvalue van client: ");
      printf(buffer);
      client.write(buffer);
      client.flush();
    }
}
//////////////////
void regelVenster(){
    if(venstercommand == 1){
      outputs =1;
    }
    else{
      outputs =0;
    }
}

///////////////////
void regelRGB(int x, int y, int z){
  for (int i = 0; i < NUM_LEDS; i++){
    leds[i] = CRGB(x, y, z);
    FastLED.show();
  }  
}
/////////////////////
void regelBrightness(int brightness){
  FastLED.setBrightness(brightness);
}
///////////////////////
void wifiVerbinden(){
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(100);
    Serial.println("Verbinding maken met WiFi...");
  }
  Serial.println("Verbonden met WiFi");
}
/////////////////////////


WiFiClient PiConnect() {  // verbinden met de pi
 // delay(1000);
  Serial.print("connecting to: ");
  Serial.print(serverIp);
  Serial.print(" :");
  Serial.println(serverPort);

  // Hiermee zet je de Wificlient class in TCP connectie modus.

  if (!client.connect(serverIp, serverPort)) {
    Serial.println("connection failed");
 
  }
  return client;
}














/*
   if(!client.connected()){
    break;
   }
   while ((WiFi.status() != WL_CONNECTED)) {
      Serial.println("Verbinding met WiFi verbroken");
      delay(100);
    }

*/

/*    while (!client.available()) {};
    {
    response = client.readStringUntil('\r');
    Serial.println("Ontvangen van de server: " + response);
    }
    */
    /*
     while (!client.available()) {}
    response = client.readStringUntil('\r');
    Serial.println("Ontvangen van de server: " + response);
    
    delay(100);
*/
//    char* responseStr;
  //  sprintf(responseStr, "%s", response);
   // sscanf(responseStr,"%*s %d %*s %d",&ID, &VensterWaarde);
   // Serial.println("ID: ");
    //Serial.println(ID);
    //Serial.println("VensterWaarde: ", VensterWaarde);
  //  receiveMessage();
    
  //  sscanf(response, "%*s %u %*s %u", &data1, &data2);
  //  Serial.println(data1);
 //   Serial.println(data2);
   // delay(500);
  //  client.stop();

/*
  
  Serial.println("Ontvangen van de server: " + response);
    
    char* responseStr;
    sprintf(responseStr, "%s", response);
    Serial.print(responseStr);
   // sscanf(responseStr,"%*s %d %*s %d",&ID, &VensterWaarde);
   // Serial.println("ID: %d VensterWaardeL %d", ID, VensterWaarde);
 //   Serial.println("ID: " + String(ID) + " VensterWaarde: " + String(VensterWaarde));
    //Serial.println("Dit is de vensterWaarde: %d", VensterWaarde);

    */
    /*
    while (client.connected()) {
    while (client.available()) {
        char c = client.read();
        if (c == '\n') {
            // End of line, stop reading
            break;
        }
        response += c;
    }
    // Process the response as needed
    if (!response.isEmpty()) {
        Serial.println("Received from server: " + response);
        // Process the response as needed
    }
    // Clear the response buffer for the next iteration
    response = "";
    }
    */
    /*
    if(client.available()){
      response = client.readStringUntil('\r');
      Serial.println("Ontvangen van de server: "+ response);
    }
*/

